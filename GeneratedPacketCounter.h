//
// Created by lahmer on 29/10/19.
//

#ifndef SIDAHMEDHMAR_PACKETCOUNTER_H
#define SIDAHMEDHMAR_PACKETCOUNTER_H


#include <string>
#include <unordered_map>
#include <map>
#include <boost/signals2/signal.hpp>
#include <fstream>
#include "Node.h"
#include "PacketHis.h"
#include "Interface.h"
#include "defs.h"
class GeneratedPacketCounter {
    public:
        GeneratedPacketCounter() = default;
        static std::unordered_map<std::string,Node*> nodes;
        static std::map<long long int,PacketHis*> packetHistory;
        static std::unordered_map<std::string,std::pair<long,long double>> tt;
        static std::pair<long,long double> trans_link;
        static std::unordered_map<std::string,Interface*> interfaces;
        static std::vector<stat> packet_in_net;

        static long long total_dropped;
        static long long total_received;
        static long long total_sent;


        static void onPacketReceived(double time, int packetIdentifier, int fluxIdentifier, const std::string& sourceNode, const std::string& destinationNode, const std::string& nowNode);
        static void onPacketDeque(double time, int packetIdentifier, int fluxIdentifier, const std::string& sourceNode, const std::string& destinationNode, const std::string& nowNode);
        static void onPacketGenerated(double time, int packetIdentifier, int fluxIdentifier, const std::string& sourceNode, const std::string& destinationNode, const std::string& nowNode);
        static void onPacketReachedDestination(double time, int packetIdentifier, int fluxIdentifier, const std::string& sourceNode, const std::string& destinationNode, const std::string& nowNode);
        static void onPacketDropped(double time, int packetIdentifier, int fluxIdentifier, const std::string& sourceNode, const std::string& destinationNode, const std::string& nowNode);


        inline static void add_tt(const std::string&src,const std::string&dst,long double t_time){
            std::string tmp = src+dst;
            std::string tmp2 = dst+src;

            if(tt.find(tmp) == tt.end() && tt.find(tmp2) == tt.end()){
                tt[tmp] = std::make_pair<long,long double>(1, reinterpret_cast<long double &&>(t_time));
                return;
            }
            if(tt.find(tmp) != tt.end()){
                tt[tmp].first++;
                tt[tmp].second += t_time;
                return;
            }
            if(tt.find(tmp2) != tt.end()){
                tt[tmp2].first++;
                tt[tmp2].second += t_time;
                return;
            }


        }

        inline static void init(){
            for (int i = 1; i < 27 ; ++i) {
                std::string node = "N"+std::to_string(i);
                Node* tmp = new Node(node);
                GeneratedPacketCounter::nodes[node] = tmp;
            }

        }

        inline static void display(){

            for (std::pair<const std::string , Node *> n : nodes){
                std::cout<<"[+] "<<n.first<<std::endl;
                long long int queue_size = (n.second->queue_size != 0 )? n.second->queue_size : n.second->queue_max_size;
                std::cout<<"\t[+] Queue size   : "<<queue_size<<std::endl;
                std::cout<<"\t[+] Generated by Me  : "<<n.second->create_by_me<<std::endl;
                std::cout<<"\t[+] droped by me     : "<<n.second->dropped_by_me<<std::endl;
                std::cout<<"\t[+] passed by me     : "<<n.second->passed_by_me<<std::endl;
                std::cout<<"==================================================="<<std::endl;
            }

            std::cout<<"\n\n";
            for (std::pair<const std::string,std::pair<long,long double>> t : tt){
                std::cout<<"[+] "<<t.first<<"\t : "<<t.second.second /(double)t.second.first<<std::endl;
            }


            std::cout<<"\n\n"<<std::endl;

            for (std::pair<std::string,Interface*> i : interfaces){
                std::cout<<"Interface "<<i.first<<" :\t"<<i.second->passed_by_me<<std::endl;
            }


            std::cout<<"\n\n"<<std::endl;
            std::cout<<"Mean of link transmission : "<<trans_link.second/(double)trans_link.first<<std::endl;
            std::cout<<"[+] Total sent : "<<total_sent<<std::endl<<"[+] Total dropped : "<<total_dropped<<std::endl<<"[+] Total received : "<<total_received<<std::endl;


            std::ofstream f1("packet_in_net.txt");
            std::ofstream f2("drop.txt");
            long double t = packet_in_net[0].last_sec;
            long long int max = 0;
            for(unsigned long i=0;i< packet_in_net.size();i += 10){
                //std::cout<<"[+] "<<packet_in_net[i].first<<"\t :"<<packet_in_net[i].second<<std::endl;
                std::string tmp = std::to_string(packet_in_net[i].time)+" "+std::to_string(packet_in_net[i].packet_num)+"\n";
                f1 << tmp;
                if(t == packet_in_net[i].last_sec){
                    if(packet_in_net[i].dropped_num > max)
                        max = packet_in_net[i].dropped_num;
                }
                else{
                    t =  packet_in_net[i].last_sec;
                    std::string tmp2 = std::to_string(packet_in_net[i].time)+" "+std::to_string(max)+"\n";
                    max = 0;
                    f2 << tmp2;
                }


            }
        }
        inline static Interface* get_interface(Node* src ,Node* dst){
            std::string tmp = src->getName()+"-"+dst->getName();
            if(interfaces.find(tmp) != interfaces.end())
                return interfaces[tmp];
            auto* i = new Interface(src,dst);
            interfaces[tmp] = i;
            return i;
        }





};


#endif //SIDAHMEDHMAR_PACKETCOUNTER_H
